@startuml trivialCompute

skinparam linetype ortho

' 1. Define the pygameMain class
class pygameMain #AntiqueWhite {
    - width: int
    - height: int
    - screen: pygame.Surface
    - run: bool
    - currState: int    
    - diceRoll: int
    - clock: pygame.time.Clock
    - settingsMenu: settingsMenu
    - gameMenu: gameMenu
    - setupMenu: setupMenu
    - trivMenu: triviaMenu
    - playerManager: playerMgr
    - trivManager: triviaMgr
    - playBoard: board
    - gameDice: dice
    - databaseConn: dbConnection
    + createTriviaMenu():void
    + createSettingsMenu():void
    + crownVictor():void
    + handleCurrentPlayerMoves():void
    + mainLoop()
}

' 2. Define the board class
class board #White {
    - width: int
    - height: int
    - tileSize: int    
    - template: list[list[str]]
    - board: list[list[tile]]
    - HQs: list[triviaType]
    + create_board(): void
    + drawBoard(screen: pygame.Surface, 
    currentNeighbors: set{tuple<int, int>}): void
}

' 3. Define the tile class
class tile #White {
    - size: int
    - mColor: color
    - title_text: str
    - title_font: pygame.font.Font    
    - title_text_size: int
    - title_color: color    
    - mDistinct: tileDistinction
    - mTrivia: triviaType
    - row: int
    - col: int
    + updateTile(inPosition: tuple<int, int>, 
    inWidth: int, inHeight: int, row: int, col: int): void 
    + drawTile(screen: pygame.Surface): void       
}

' 4. Define the dice class
class dice #White {
    - diceText: textWidget
    - rolling: bool
    - diceValue: int
    - rollCount: int
    - current_number: int
    - update_interval: int
    - total_duration: int
    - timer: int
    - start_time: int
    - snap_time: int
    + rollDice(screen: any): int    
    + drawDice(screen: any, 
    movLockout: bool): void
}

' 5. Define the playerMgr class
class playerMgr {
    - players: list[player]
    - currentPlayerIndex: int
    + initiatePlayers(list[str]): void     
    + randomlyOrder() : void
    + getCurrentPlayer(): player
    + nextPlayer(): player
    + movePlayerToken(playerPosition: tuple<int,int>): void
    + updatePlayerScore(tuple<int,int>): void        
    + screenPosToCoord(playerPosition: tuple<int,int>): tuple<int,int>
    + checkIfPlayerJustWon(): bool
    + drawPlayers(): void
}

' 6. Define the player class
class player {
    - playerScore: dict
    - playerToken: token
    - playerPosition : tuple<int, int> 
    - isTurn: bool
    - hasRolled: bool
    + drawPlayer(screen: pygame.Surface): void
}

' 7. Define the token class
class token {
    - circle_radius: int
    - circle_x: int
    - circle_y: int
    - circle_color: Color
    - currCordinate: tuple<int, int> 
    - dragging: bool
    - currentNeighbors: list[tuple<int, int>]
    + getNeighbors(inboard: board, curPosition: tuple<int, int> , diceRolls: int, possibleNeighbors: list[tuple<int, int>]): list[tuple<int, int>]
    + pruneNeighbors(diceRoll: int): void
    + checkIfHeld(inEvent: pygame.event): bool
    + checkValidMove(inTile: tile): bool
    + updateBoardPos(inTile: tile, diceRoll: int): void
    + setScreenCoords(inX: int, inY: int): void
}

' 8. Define the gameMenu class
class gameMenu  #AliceBlue {
  - width: int
  - height: int
  - screenCoords: tuple<int, int> 
  - title_font: pygame.font.Font
  - title_text: str
  - title_text_size: int
  - child_Dictionary: dict[childType, list]
  - overlayTarget: tuple<int, int> 
  - button_start_pos: tuple<int, int> 
  - currButtonWidth: int
  - currButtonHeight: int
  - lockOut: bool
  - buttons: set{button}
  - textWidgets: set{textWidget}
  + draw_rounded_rect(surface: pygame.Surface): void
  + drawMenu(screen: pygame.Surface, title_col: Color): void
  + slideIn(target: tuple<int, int>, inTime: int): void
  + addChildComponent(inComponent: object): void
  + listen_for_buttons(event: pygame.event.Event): int
  + gameMenuLoop(): void
}

' 9. Define the settingsMenu class
class settingsMenu  #AliceBlue {
    - toDraw: bool
    - startX: int
    - startY: int
    - menuDuration: int
    - newCent: int
    - isOut: bool
    - stateList: list
    - activeDictionary: dict
    - exitButton: button
    - rightButton: button
    - leftButton: button
    - activeIndex: int
    - buttons: set{button}
    - textWidgets: set{textWidget}
    - checkBoxWidgets: set{checkBoxWidgets}
    + settingsMenuLoop(): void
    + addChildComponent(inComponent: object): void
    + updateButtonFadeBoxes(): void
    + addDictionary(): void
    + switchActiveDictionary(index: int): void
    + slideFadeBox(): void
    + slideMenu(): void
    + slideButtons(): void
    + slideSliders(): void
    + slideTextWidgets(): void
    + slideCheckBoxes(): void
    + slideAll(): void
    + bindCheckBoxes(): void
    + listen_for_checkBox(event: pygame.event): void
    + listen_for_buttons(event: pygame.event): int
    + drawMenu(screen: pygame.Surface): void
}

' 10. Define the textWidget class
class textWidget #AliceBlue {
    - width: int
    - height: int
    - screenCoords: tuple<int, int>    
    - rect: pygame.Rect    
    - title_font: pygame.font.Font
    - title_text: str
    - title_text_size: int
    + draw_rounded_rect(surface: pygame.Surface): void
    + drawWidget(screen: pygame.Surface): void
    + wrap_text(text: str, max_width: int): list[str]
    + updateText(inText: str): void
}

' 11. Define the checkBoxWidget class
class checkBoxWidget #AliceBlue {
    - checkbox_rect: pygame.Rect
    - checked: bool
    - screenCoords: tuple<int, int>  
    + listen(event: pygame.event.Event): bool
    + drawWidget(screen: pygame.Surface): void
}

' 12. Define the button class
class button #AliceBlue {
    - width: int
    - height: int
    - screenCoords: tuple<int, int> 
    - button_inner_color: color
    - rect: pygame.Rect
    - button_text_font: pygame.font.Font
    - button_text_size: int
    - button_text: str
    - button_text_color: color
    - lockout: bool
    + draw_rounded_rect(surface: pygame.Surface): void
    + draw_button(screen: pygame.Surface): void
    + isClicked(event: pygame.event.Event): bool
}

' 13. Define the Question class
class question {
  - questionId: int
  - questionText: str
  - multimediaContent: any
  - category: str
  - answer: answer
  + getQuestionText() : str
  + getMultimediaContent() : any
}

' 14. Define the Answer class
class answer {
  - answerText: str
  + getAnswer() : str
}

' 15. Define the triviaMgr class
class triviaMgr {
    - selectedCategories: list[str]
    - currentQuestionId: int
    - currentQuestion: question
    - currentAnswer: answer
    - previousQuestionIds: list[int]
    - previousQuestions: list[question]
    + setSelectedCategories(categories: list[str]): void
    + getNextQuestion(conn: dbConnection, category: str): question
    + getPreviousQuestionIds(): list[str]
    + questionPlayer(): bool
}

' 16. Define the dbConnection class
class dbConnection #LightSalmon {
    - dbname: str
    - user: str
    - password: str
    - host: str
    - port: int
    - conn: any
    + connect(): conn
    + close(): void
    + executeQueryFetchAll(query: str, params: list): list
    + executeQueryFetchOne(query: str, params: list): any
    + getQuestionAndAnswerByCategory(category: str): any
    + getRandomQuestionAndAnswer(): any
    + getCategories(): list
}

' 17. Define the triviaMenu class
class triviaMenu #AliceBlue {
    - toDraw: bool
    - startX: int
    - startY: int
    - menuDuration: int
    - newCent: int
    - isOut: bool
    - stateList: list
    - activeDictionary: dict
    - startButton: button
    - buttons: set{button}
    - textWidgets: set{textWidget}
    - timer: timerClock 
    + addChildComponent(inComponent): void
    + addDictionary(): void
    + switchActiveDictionary(index: int): void
    + slideFadeBox(): void
    + slideMenu(): void
    + slideButtons(): void
    + slideTextWidgets(): void
    + slideClock(): void
    + resetTimer(): void
    + slideAll(): void
    + listen_for_buttons(event): int
    + drawMenu(screen): void
}

' 18. Define dbMgr class
class dbMgr #DarkGrey {
    - conn
    - cur
    + db_connect() : conn
    + get_categories() : list
    + get_questions_by_category(category: str): list
    + get_category_name_by_category_id(category_id: int) : str
    + add_category(name: str)
    + add_question(question: str, answer: str, category : str) : void
    + remove_question(question_id) : void
    + remove_category(category_id) : void
}

' 19. Define ttkGuiApp class
class ttkGuiApp #DarkGrey {
    - db_manager: dbMgr
    - category_frame
    - action_frame
    - init_db_button
    - display_categories_button
    - category_list
    - add_category_button
    - remove_category_button
    - selected_category: str
    + init_db(): void
    + display_categories(): void
    + on_category_select(event): void
    + display_questions(category): void
    + show_add_category(): void
    + submit_category(): void
    + show_add_question(): void
    + submit_question(): void
    + show_remove_question(): void
    + show_remove_category(): void
}

' 20. Define timerClock class
class timerClock  #AliceBlue {
    - radius: int
    - width: int
    - position: tuple<int, int>     
    - font: pygame.font.Font
    - text: str
    - event: pygame.event
    - counter: int
    - clock: pygame.time.Clock
    - startCounting: bool
    - shouldDraw: bool
    + drawArcCv2(surf, color, 
    center, radius, width, end_angle): void
    + countTime(event)
    + drawClock(window)      
}

' 21. Define setupMenu class
class setupMenu #AliceBlue {
    - numPlayers: int
    - playerNames: list[str]
    - questionCategories: list[str]
    - playerTokenColors: map<str, Color>
    - categoryColors: map<str, Color>   
    - buttons: set{button}
    - textWidgets: set{textWidget} 
    + selectNumPlayers(numPlayers: int): void
    + nterPlayerName(playerIndex: int, name: str): void
    + selectPlayerTokenColor(playerIndex: int, color: Color): void
    + selectQuestionCategories(categories: list[str]): void
    + associateCategoryColor(category: str, color: Color): void
    + listen_for_checkBox(event: pygame.event): void
    + listen_for_buttons(event: pygame.event): int
    + drawMenu(screen: pygame.Surface): list[str],list[str],map[str,Colors]
    + setupMenuLoop(): void
    +submitSelections(): void
}

ttkGuiApp " 1 " --> " 1 " dbMgr : uses
dbMgr " 1 " --> " 1 " dbConnection : manages

pygameMain "1" --> " 1 " board : contains
pygameMain "1" --> " 1..2 " dice : uses
pygameMain "1" --> " * " textWidget : displays
pygameMain "1" --> " 1 " setupMenu : uses
pygameMain "1" --> " 1 " gameMenu : uses
pygameMain "1" --> " 1 " settingsMenu : uses
pygameMain "1" --> " 1 " triviaMenu : uses
pygameMain "1" --> " 1 " dbConnection : uses
pygameMain "1" --> " 1 " playerMgr : manages
pygameMain "1" --> " 1 " triviaMgr : manages

triviaMgr " 1 " o--> " * " question : contains
question " 1 " *--> " 1 " answer : consists of
board " 1 " *--> " 81 " tile : composed of

gameMenu " 1 " o--> " * " button : contains
gameMenu " 1 " o--> " * " textWidget : contains

setupMenu " 1 " o--> " * " checkBoxWidget : contains
setupMenu "1" o--> " * " textWidget : contains
setupMenu " 1 " o--> " * " button : contains

settingsMenu " 1 " o--> " * " checkBoxWidget : contains
settingsMenu " 1 " o--> " * " textWidget : contains
settingsMenu " 1 " o--> " * " button : contains

triviaMenu " 1 " o--> " * " button : contains
triviaMenu " 1 " o--> " * " textWidget : contains

triviaMenu " 1 " --> " 1 " timerClock : uses

playerMgr " 1 " o--> " 1..4 " player : manages
player " 1 " *--> " 1 " token : owns

@enduml